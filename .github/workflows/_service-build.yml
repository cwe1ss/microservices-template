name: 'Template: Service Build'

on:
  workflow_call:
    inputs:
      solutionFolder:
        required: true
        type: string
      projectFolder:
        required: true
        type: string
      imageName:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      REGISTRY_SERVER:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Docker Login to ACR
      run: |
        set -euo pipefail
        access_token=$(az account get-access-token --query accessToken -o tsv)
        refresh_token=$(curl https://${{ secrets.REGISTRY_SERVER }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ secrets.REGISTRY_SERVER }}&access_token=$access_token" | jq -r .refresh_token)
        docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ secrets.REGISTRY_SERVER }} <<< "$refresh_token"

    - uses: actions/setup-dotnet@v2

    - run: dotnet --version

    - run: dotnet build "${{ inputs.solutionFolder }}" -c Release

    # TODO tests

    - name: Create SQL migration script
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef migrations script --configuration Release --no-build --idempotent -p "${{ inputs.projectFolder }}" -o artifacts/migration.sql

    # - name: Archive SQL Migration script
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: sql-migration
    #     path: |
    #       artifacts/migration.sql

    # TODO: Storage account name & container
    - name: Upload SQL migration script to Azure Storage
      run: |
        az storage blob upload --auth-mode login --account-name labmsasa --container-name sql-migration --name sql-${{ inputs.imageName }}-${{ github.run_number }}.sql --file artifacts/migration.sql

    - run: dotnet publish "${{ inputs.projectFolder }}" -c Release --os linux --arch x64 -p:PublishProfile=DefaultContainer -p:ContainerImageName=${{ inputs.imageName }} -p:ContainerImageTag=${{ github.run_number }}

    - run: docker tag ${{ inputs.imageName }}:${{ github.run_number }} ${{ secrets.REGISTRY_SERVER }}/${{ inputs.imageName }}:${{ github.run_number }}

    - run: docker push ${{ secrets.REGISTRY_SERVER }}/${{ inputs.imageName }}:${{ github.run_number }}
